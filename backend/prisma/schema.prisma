// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  name String?
  email String?
  password String
  phone String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model Hotel {
  hotel_id Int @default(autoincrement()) @id
  trip_id Int
  guest_id Int?
  room_id String?
  name   String  @unique
  address  String  @unique
  cost  Int     
  check_in_date   DateTime
  check_out_date  DateTime
  number_of_guests Int
  status   String  @default("pending")
  img      Bytes?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Activity {
  activities_id   Int  @default(autoincrement()) @id
  trip_id         Int
  activity_booking_id Int?
  guest_id        Int?
  activity_name   String
  description     String?
  location        String
  schedule        DateTime
  price           Int
  status          String  @default("pending")
  booking_time    DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Booking {
  id               Int       @id @default(autoincrement())
  user_id          String
  trip_id          BigInt
  service_type     String
  origin           String    @default("unknown")
  destination      String    @default("unknown")
  service_start    DateTime  @default(now())
  service_end      DateTime  @default(now())
  travelers        Int       @default(1)
  budget           Int       @default(0)
  preferences      String?
  status           String
  payment_method   String?
  booking_reference BigInt?
  booking_date     DateTime?
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt

  payments         Payment[]  @relation("BookingPayments")
}

model Payment {
  payment_id      Int      @id @default(autoincrement())
  userId          String
  amount          Int      @default(0)
  paymentMethod   String   @default("")
  hotelName       String   @default("")
  destination     String   @default("")
  checkIn         String
  checkOut        String
  nights          Int      @default(1)
  hotelPrice      Int      @default(0)
  flightPrice     Int      @default(0)
  outboundFlight  String   @default("")
  returnFlight    String   @default("")
  todoList        String[]
  dailyActivities Json     @default("{}")

  bookingId       Int?  // ← optional
  booking         Booking? @relation("BookingPayments", fields: [bookingId], references: [id])  // ← เพิ่ม ?

  paymentStatus   String?
  paymentDate     DateTime?
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model Recommendation {
  recommendation_id Int @default(autoincrement()) @id
  user_id           Int
  destination_id    Int?
  trip_id           Int?
  budget            Int
  recommend_type    String  // "flight", "hotel", "activity", "restaurant"
  item_id           Int?
  item_name         String
  item_price        Int
  recommendation_date DateTime @default(now())
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}